// -*- mode:c++ -*-

/*
 * Copyright (c) 1999-2005 Mark D. Hill and David A. Wood
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met: redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer;
 * redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution;
 * neither the name of the copyright holders nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// CoherenceRequestType
enumeration(CoherenceRequestType, desc="Types of request messages") {
  // Requests from cache to directory
  GetS, desc="Request from cache for a block with read permission";
  GetM, desc="Request from cache for a block with write permission";
  PutS, desc="Evict block in S (clean writeback)";
  PutM, desc="Evict block in M (dirty writeback)";

  // "Requests" from the directory to the caches on the fwd network
  Inv, desc="Directory command to invalidate any matching blocks";
  PutAck, desc="Direcetory message acknowledging put request was processed";
}

// CoherenceResponseType
enumeration(CoherenceResponseType, desc="Types of response messages") {
  Data, desc="Contains the most up-to-date data";
  InvAck, desc="Message from another cache that they have invalidated the block";
}

// RequestMsg (and also forwarded requests)
structure(RequestMsg, desc="Used for Cache to Dir and Fwd messages", interface="Message") {
  Addr addr,             desc="Physical address for this request";
  CoherenceRequestType Type,   desc="Type of request";
  MachineID Requestor,            desc="Node who initiated the request";
  NetDest Destination,             desc="Multicast destination mask";
  DataBlock DataBlk,           desc="data for the cache line";
  MessageSizeType MessageSize, desc="size category of the message";

  bool functionalRead(Packet *pkt) {
    // requests should never have the only copy of the most up-to-date data
    return false;
  }

  bool functionalWrite(Packet *pkt) {
    // No check on message type required since the protocol should read
    // data block from only those messages that contain valid data
    return testAndWrite(addr, DataBlk, pkt);
  }
}

// ResponseMsg (and also unblock requests)
structure(ResponseMsg, desc="Used for Dir to Cache and Fwd message response", interface="Message") {
  Addr addr,             desc="Physical address for this request";
  CoherenceResponseType Type,  desc="Type of response";
  MachineID Sender,               desc="Node who sent the data";
  NetDest Destination,             desc="Node to whom the data is sent";
  DataBlock DataBlk,           desc="data for the cache line";
  MessageSizeType MessageSize, desc="size category of the message";
  int Acks, desc="Number of acks required from others";

  bool functionalRead(Packet *pkt) {
    if (Type == CoherenceResponseType:Data) {
      return testAndRead(addr, DataBlk, pkt);
    }
    return false;
  }

  bool functionalWrite(Packet *pkt) {
    // No check on message type required since the protocol should read
    // data block from only those messages that contain valid data
    return testAndWrite(addr, DataBlk, pkt);
  }
}

